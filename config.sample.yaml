server:
  ## server.hostname (string)
  ## Description:
  ##   The hostname the application is reached at.
  ##   This is used for setting the "redirect_uri" field for OAuth2 callbacks.
  ## Required
  hostname: "auth.example.com"

  ## server.port (number)
  ## Description:
  ##   Port to bind to.
  ## Default: 4181
  #port: 4181

  ## server.bind (string)
  ## Description:
  ##   Address/interface to bind to.
  ## Default: "0.0.0.0"
  #bind: "0.0.0.0"

  ## server.basePath (string)
  ## Description:
  ##   Base path for all routes.
  ##   Set this if Traefik is forwarding requests to traefik-forward-auth for specific paths only.
  ##   Note: this does not apply to /api and /healthz routes
  #basePath: "/auth"

  ## server.tlsPath (string)
  ## Description:
  ##   Path where to load TLS certificates from. Within the folder, the files must be named `tls-cert.pem` and `tls-key.pem` (and optionally `tls-ca.pem`).
  ##   The server watches for changes in this folder and automatically reloads the TLS certificates when they're updated.
  ##   If empty, certificates are loaded from the same folder where the loaded `config.yaml` is located.
  ## Default: Folder where the `config.yaml` file is located
  #tlsPath: Folder where the `config.yaml` file is located

  ## server.tlsCertPEM (string)
  ## Description:
  ##   Full, PEM-encoded TLS certificate.
  ##   Using `server.tlsCertPEM` and `server.tlsKeyPEM` is an alternative method of passing TLS certificates than using `server.tlsPath`.
  #tlsCertPEM: ""

  ## server.tlsKeyPEM (string)
  ## Description:
  ##   Full, PEM-encoded TLS key.
  ##   Using `server.tlsCertPEM` and `server.tlsKeyPEM` is an alternative method of passing TLS certificates than using `server.tlsPath`.
  #tlsKeyPEM: ""

  ## server.tlsCAPEM (string)
  ## Description:
  ##   Full, PEM-encoded TLS CA certificate, used for TLS client authentication (mTLS).
  ##   This is an alternative method of passing the CA certificate than using `tlsPath`.
  ##   Note that this is ignored unless `server.tlsClientAuth` is set to `true`.
  #tlsCAPEM: ""

  ## server.tlsClientAuth (boolean)
  ## Description:
  ##   If true, enables mTLS for client authentication.
  ##   Requests to the root endpoint (normally used by Traefik) must have a valid client certificate signed by the CA.
  ## Default: false
  #tlsClientAuth: false

  ## server.trustedRequestIdHeader (string)
  ## Description:
  ##   String with the name of a header to trust as ID of each request. The ID is included in logs and in responses as `X-Request-ID` header.
  ##   Common values include:
  ##
  ##   - `X-Request-ID`: a [de-facto standard](https://http.dev/x-request-id) that's vendor agnostic
  ##   - `CF-Ray`: when the application is served by a [Cloudflare CDN](https://developers.cloudflare.com/fundamentals/get-started/reference/cloudflare-ray-id/)
  ##
  ##   If this option is empty, or if it contains the name of a header that is not found in an incoming request, a random UUID is generated as request ID.
  #trustedRequestIdHeader: "X-Request-ID"

cookies:
  ## cookies.domain (string)
  ## Description:
  ##   Domain name for setting cookies.
  ##   If empty, this is set to the value of the `hostname` property.
  ##   This value must either be the same as the `hostname` property, or the hostname must be a sub-domain of the cookie domain name.
  #domain: "auth.example.com"

  ## cookies.namePrefix (string)
  ## Description:
  ##   Prefix for the cookies used to store the sessions.
  ## Default: "tf_sess"
  #namePrefix: "tf_sess"

  ## cookies.insecure (boolean)
  ## Description:
  ##   If true, sets cookies as "insecure", which are served on HTTP endpoints too.
  ##   By default, this is false and cookies are sent on HTTPS endpoints only.
  ## Default: false
  #insecure: false

tokens:
  ## tokens.sessionLifetime (duration)
  ## Description:
  ##   Lifetime for sessions after a successful authentication.
  ## Default: "2h"
  #sessionLifetime: "2h"

  ## tokens.signingKey (string)
  ## Description:
  ##   String used as key to sign state tokens.
  ##   Can be generated for example with `openssl rand -base64 32`
  ##   If left empty, it will be randomly generated every time the app starts (recommended, unless you need user sessions to persist after the application is restarted).
  #signingKey: ""

  ## tokens.signingKeyFile (string)
  ## Description:
  ##   File containing the key used to sign state tokens.
  ##   This is an alternative to specifying `signingKey` tokens.directly.
  #signingKeyFile: ""

  ## tokens.sessionTokenAudience (string)
  ## Description:
  ##   Value for the audience claim to expect in session tokens used by Traefik Forward Auth.
  ##   Defaults to a value based on `cookies.domain` and `server.basePath` which is appropriate for the majority of cases. Most users should rely on the default value.
  #sessionTokenAudience: ""

logs:
  ## logs.level (string)
  ## Description:
  ##   Controls log level and verbosity. Supported values: `debug`, `info` (default), `warn`, `error`.
  ## Default: "info"
  #level: "info"

  ## logs.omitHealthChecks (boolean)
  ## Description:
  ##   If true, calls to the healthcheck endpoint (`/healthz`) are not included in the logs.
  ## Default: true
  #omitHealthChecks: true

  ## logs.json (boolean)
  ## Description:
  ##   If true, emits logs formatted as JSON, otherwise uses a text-based structured log format.
  ##   Defaults to false if a TTY is attached (e.g. in development); true otherwise.
  #json: false

## defaultPortal (string)
## Description:
##   If set to the name of a portal defined in "portals", it makes the portal available on the root endpoint, without the `portals/<name>/` prefix
#defaultPortal: "myportal"

## portals (list)
## Description:
##   List of portals when running in multi-portal mode
## Required
portals: []

